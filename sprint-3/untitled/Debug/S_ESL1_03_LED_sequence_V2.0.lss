
S_ESL1_03_LED_sequence_V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000784  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000784  00000818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006e  0080006e  00000826  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000174a  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab7  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dea  00000000  00000000  00002bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  000039a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088d  00000000  00000000  00003b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a73  00000000  00000000  00004429  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	8f 00       	.word	0x008f	; ????
  56:	a0 00       	.word	0x00a0	; ????
  58:	b1 00       	.word	0x00b1	; ????
  5a:	c2 00       	.word	0x00c2	; ????
  5c:	d3 00       	.word	0x00d3	; ????
  5e:	e3 00       	.word	0x00e3	; ????
  60:	f3 00       	.word	0x00f3	; ????
  62:	03 01       	movw	r0, r6

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 e8       	ldi	r30, 0x84	; 132
  78:	f7 e0       	ldi	r31, 0x07	; 7
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	ae e6       	ldi	r26, 0x6E	; 110
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 37       	cpi	r26, 0x72	; 114
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 1b 03 	call	0x636	; 0x636 <main>
  9a:	0c 94 c0 03 	jmp	0x780	; 0x780 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <__vector_1>:

INT_ExtInit_t PushButton_Int = {INT0, RISING_EDGE};

uint8 counter = 0;

ISR(EXT_INT0) {
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
    if (counter < 8) {
  ae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
  b2:	88 30       	cpi	r24, 0x08	; 8
  b4:	20 f4       	brcc	.+8      	; 0xbe <__vector_1+0x1c>
        counter++;
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <__vector_1+0x22>
    } else {
        counter = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
    }
}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <APP_Init>:

void APP_Init() {

	LED_Init(&LED0);
  d0:	8f e6       	ldi	r24, 0x6F	; 111
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 a1 01 	call	0x342	; 0x342 <LED_Init>
	LED_Init(&LED1);
  d8:	8b e6       	ldi	r24, 0x6B	; 107
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 a1 01 	call	0x342	; 0x342 <LED_Init>
	LED_Init(&LED2);
  e0:	88 e6       	ldi	r24, 0x68	; 104
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 a1 01 	call	0x342	; 0x342 <LED_Init>
	LED_Init(&LED3);
  e8:	85 e6       	ldi	r24, 0x65	; 101
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 a1 01 	call	0x342	; 0x342 <LED_Init>

	PB_Init(&PB0);
  f0:	82 e6       	ldi	r24, 0x62	; 98
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <PB_Init>
	
	INT_ExtInterruptInit(&PushButton_Int);
  f8:	80 e6       	ldi	r24, 0x60	; 96
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 de 02 	call	0x5bc	; 0x5bc <INT_ExtInterruptInit>
 100:	08 95       	ret

00000102 <APP_Start>:
}

void APP_Start() {
    switch (counter) {
 102:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 106:	8e 2f       	mov	r24, r30
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	e8 30       	cpi	r30, 0x08	; 8
 110:	f1 05       	cpc	r31, r1
 112:	08 f0       	brcs	.+2      	; 0x116 <APP_Start+0x14>
 114:	87 c0       	rjmp	.+270    	; 0x224 <APP_Start+0x122>
 116:	e6 5d       	subi	r30, 0xD6	; 214
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	0c 94 ba 03 	jmp	0x774	; 0x774 <__tablejump2__>
        case 1:
            LED0.led_status = LED_ON;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <LED0+0x2>
            LED_On(&LED0);
 124:	8f e6       	ldi	r24, 0x6F	; 111
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 13 01 	call	0x226	; 0x226 <LED_On>
            while (PB0.pb_status == PB_HIGH) {
 12c:	04 c0       	rjmp	.+8      	; 0x136 <APP_Start+0x34>
                PB_ReadState(&PB0);
 12e:	82 e6       	ldi	r24, 0x62	; 98
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
void APP_Start() {
    switch (counter) {
        case 1:
            LED0.led_status = LED_ON;
            LED_On(&LED0);
            while (PB0.pb_status == PB_HIGH) {
 136:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	c1 f3       	breq	.-16     	; 0x12e <APP_Start+0x2c>
 13e:	08 95       	ret
                PB_ReadState(&PB0);
            }
            break;
        case 2:
            LED1.led_status = LED_ON;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <LED1+0x2>
            LED_On(&LED1);
 146:	8b e6       	ldi	r24, 0x6B	; 107
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 13 01 	call	0x226	; 0x226 <LED_On>
            while (PB0.pb_status == PB_HIGH) {
 14e:	04 c0       	rjmp	.+8      	; 0x158 <APP_Start+0x56>
                PB_ReadState(&PB0);
 150:	82 e6       	ldi	r24, 0x62	; 98
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
            }
            break;
        case 2:
            LED1.led_status = LED_ON;
            LED_On(&LED1);
            while (PB0.pb_status == PB_HIGH) {
 158:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	c1 f3       	breq	.-16     	; 0x150 <APP_Start+0x4e>
 160:	08 95       	ret
                PB_ReadState(&PB0);
            }
            break;
        case 3:
            LED2.led_status = LED_ON;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <LED2+0x2>
            LED_On(&LED2);
 168:	88 e6       	ldi	r24, 0x68	; 104
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 13 01 	call	0x226	; 0x226 <LED_On>
            while (PB0.pb_status == PB_HIGH) {
 170:	04 c0       	rjmp	.+8      	; 0x17a <APP_Start+0x78>
                PB_ReadState(&PB0);
 172:	82 e6       	ldi	r24, 0x62	; 98
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
            }
            break;
        case 3:
            LED2.led_status = LED_ON;
            LED_On(&LED2);
            while (PB0.pb_status == PB_HIGH) {
 17a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	c1 f3       	breq	.-16     	; 0x172 <APP_Start+0x70>
 182:	08 95       	ret
                PB_ReadState(&PB0);
            }
            break;
        case 4:
            LED3.led_status = LED_ON;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <LED3+0x2>
            LED_On(&LED3);
 18a:	85 e6       	ldi	r24, 0x65	; 101
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 13 01 	call	0x226	; 0x226 <LED_On>
            while (PB0.pb_status == PB_HIGH) {
 192:	04 c0       	rjmp	.+8      	; 0x19c <APP_Start+0x9a>
                PB_ReadState(&PB0);
 194:	82 e6       	ldi	r24, 0x62	; 98
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
            }
            break;
        case 4:
            LED3.led_status = LED_ON;
            LED_On(&LED3);
            while (PB0.pb_status == PB_HIGH) {
 19c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	c1 f3       	breq	.-16     	; 0x194 <APP_Start+0x92>
 1a4:	08 95       	ret
                PB_ReadState(&PB0);
            }
            break;
        case 5:
            LED0.led_status = LED_OFF;
 1a6:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <LED0+0x2>
            LED_Off(&LED0);
 1aa:	8f e6       	ldi	r24, 0x6F	; 111
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_Off>
            while (PB0.pb_status == PB_HIGH) {
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <APP_Start+0xba>
                PB_ReadState(&PB0);
 1b4:	82 e6       	ldi	r24, 0x62	; 98
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
            }
            break;
        case 5:
            LED0.led_status = LED_OFF;
            LED_Off(&LED0);
            while (PB0.pb_status == PB_HIGH) {
 1bc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	c1 f3       	breq	.-16     	; 0x1b4 <APP_Start+0xb2>
 1c4:	08 95       	ret
                PB_ReadState(&PB0);
            }
            break;
        case 6:
            LED1.led_status = LED_OFF;
 1c6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <LED1+0x2>
            LED_Off(&LED1);
 1ca:	8b e6       	ldi	r24, 0x6B	; 107
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_Off>
            while (PB0.pb_status == PB_HIGH) {
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <APP_Start+0xda>
                PB_ReadState(&PB0);
 1d4:	82 e6       	ldi	r24, 0x62	; 98
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
            }
            break;
        case 6:
            LED1.led_status = LED_OFF;
            LED_Off(&LED1);
            while (PB0.pb_status == PB_HIGH) {
 1dc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	c1 f3       	breq	.-16     	; 0x1d4 <APP_Start+0xd2>
 1e4:	08 95       	ret
                PB_ReadState(&PB0);
            }
            break;
        case 7:
            LED2.led_status = LED_OFF;
 1e6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <LED2+0x2>
            LED_Off(&LED2);
 1ea:	88 e6       	ldi	r24, 0x68	; 104
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_Off>
            while (PB0.pb_status == PB_HIGH) {
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <APP_Start+0xfa>
                PB_ReadState(&PB0);
 1f4:	82 e6       	ldi	r24, 0x62	; 98
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
            }
            break;
        case 7:
            LED2.led_status = LED_OFF;
            LED_Off(&LED2);
            while (PB0.pb_status == PB_HIGH) {
 1fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	c1 f3       	breq	.-16     	; 0x1f4 <APP_Start+0xf2>
 204:	08 95       	ret
                PB_ReadState(&PB0);
            }
            break;
        case 8:
            LED3.led_status = LED_OFF;
 206:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LED3+0x2>
            LED_Off(&LED3);
 20a:	85 e6       	ldi	r24, 0x65	; 101
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_Off>
            while (PB0.pb_status == PB_HIGH) {
 212:	04 c0       	rjmp	.+8      	; 0x21c <APP_Start+0x11a>
                PB_ReadState(&PB0);
 214:	82 e6       	ldi	r24, 0x62	; 98
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <PB_ReadState>
            }
            break;
        case 8:
            LED3.led_status = LED_OFF;
            LED_Off(&LED3);
            while (PB0.pb_status == PB_HIGH) {
 21c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PB0+0x2>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	c1 f3       	breq	.-16     	; 0x214 <APP_Start+0x112>
 224:	08 95       	ret

00000226 <LED_On>:
 * The function first checks if the status of the led, an accordingly turns on the LED.
 * @return LED_PORT_INVALID
 * @return LED_STATUS_INVALID
 * @return LED_SUCCESS
 */
EN_LED_API_STATE LED_On(LED_Init_t *p_led_config_struct) {
 226:	fc 01       	movw	r30, r24
    uint8 port_num = p_led_config_struct -> port;
 228:	90 81       	ld	r25, Z
    if (p_led_config_struct -> led_status == LED_ON) {
 22a:	82 81       	ldd	r24, Z+2	; 0x02
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	e1 f5       	brne	.+120    	; 0x2a8 <LED_On+0x82>
        switch (port_num) {
 230:	91 30       	cpi	r25, 0x01	; 1
 232:	99 f0       	breq	.+38     	; 0x25a <LED_On+0x34>
 234:	28 f0       	brcs	.+10     	; 0x240 <LED_On+0x1a>
 236:	92 30       	cpi	r25, 0x02	; 2
 238:	e9 f0       	breq	.+58     	; 0x274 <LED_On+0x4e>
 23a:	93 30       	cpi	r25, 0x03	; 3
 23c:	41 f1       	breq	.+80     	; 0x28e <LED_On+0x68>
 23e:	36 c0       	rjmp	.+108    	; 0x2ac <LED_On+0x86>
            case PORT_A:
                SET_BIT(PORTA, p_led_config_struct -> pin);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 80       	ldd	r0, Z+1	; 0x01
 246:	02 c0       	rjmp	.+4      	; 0x24c <LED_On+0x26>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <LED_On+0x22>
 250:	9b b3       	in	r25, 0x1b	; 27
 252:	89 2b       	or	r24, r25
 254:	8b bb       	out	0x1b, r24	; 27
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 256:	80 e0       	ldi	r24, 0x00	; 0
    uint8 port_num = p_led_config_struct -> port;
    if (p_led_config_struct -> led_status == LED_ON) {
        switch (port_num) {
            case PORT_A:
                SET_BIT(PORTA, p_led_config_struct -> pin);
                break;
 258:	08 95       	ret
            case PORT_B:
                SET_BIT(PORTB, p_led_config_struct -> pin);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 80       	ldd	r0, Z+1	; 0x01
 260:	02 c0       	rjmp	.+4      	; 0x266 <LED_On+0x40>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	0a 94       	dec	r0
 268:	e2 f7       	brpl	.-8      	; 0x262 <LED_On+0x3c>
 26a:	98 b3       	in	r25, 0x18	; 24
 26c:	89 2b       	or	r24, r25
 26e:	88 bb       	out	0x18, r24	; 24
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 270:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_A:
                SET_BIT(PORTA, p_led_config_struct -> pin);
                break;
            case PORT_B:
                SET_BIT(PORTB, p_led_config_struct -> pin);
                break;
 272:	08 95       	ret
            case PORT_C:
                SET_BIT(PORTC, p_led_config_struct -> pin);
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 80       	ldd	r0, Z+1	; 0x01
 27a:	02 c0       	rjmp	.+4      	; 0x280 <LED_On+0x5a>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <LED_On+0x56>
 284:	95 b3       	in	r25, 0x15	; 21
 286:	89 2b       	or	r24, r25
 288:	85 bb       	out	0x15, r24	; 21
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 28a:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_B:
                SET_BIT(PORTB, p_led_config_struct -> pin);
                break;
            case PORT_C:
                SET_BIT(PORTC, p_led_config_struct -> pin);
                break;
 28c:	08 95       	ret
            case PORT_D:
                SET_BIT(PORTD, p_led_config_struct -> pin);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 80       	ldd	r0, Z+1	; 0x01
 294:	02 c0       	rjmp	.+4      	; 0x29a <LED_On+0x74>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <LED_On+0x70>
 29e:	92 b3       	in	r25, 0x12	; 18
 2a0:	89 2b       	or	r24, r25
 2a2:	82 bb       	out	0x12, r24	; 18
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_C:
                SET_BIT(PORTC, p_led_config_struct -> pin);
                break;
            case PORT_D:
                SET_BIT(PORTD, p_led_config_struct -> pin);
                break;
 2a6:	08 95       	ret
            default:
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	08 95       	ret
                break;
            case PORT_D:
                SET_BIT(PORTD, p_led_config_struct -> pin);
                break;
            default:
                return LED_PORT_INVALID;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
}
 2ae:	08 95       	ret

000002b0 <LED_Off>:
 * The function first checks if the status of the led, an accordingly turns on the LED.
 * @return LED_PORT_INVALID
 * @return LED_STATUS_INVALID
 * @return LED_SUCCESS
 */
EN_LED_API_STATE LED_Off(LED_Init_t *p_led_config_struct) {
 2b0:	fc 01       	movw	r30, r24
    uint8 port_num = p_led_config_struct -> port;
 2b2:	90 81       	ld	r25, Z
    if (p_led_config_struct -> led_status == LED_OFF) {
 2b4:	82 81       	ldd	r24, Z+2	; 0x02
 2b6:	81 11       	cpse	r24, r1
 2b8:	40 c0       	rjmp	.+128    	; 0x33a <LED_Off+0x8a>
        switch (port_num) {
 2ba:	91 30       	cpi	r25, 0x01	; 1
 2bc:	a1 f0       	breq	.+40     	; 0x2e6 <LED_Off+0x36>
 2be:	28 f0       	brcs	.+10     	; 0x2ca <LED_Off+0x1a>
 2c0:	92 30       	cpi	r25, 0x02	; 2
 2c2:	f9 f0       	breq	.+62     	; 0x302 <LED_Off+0x52>
 2c4:	93 30       	cpi	r25, 0x03	; 3
 2c6:	59 f1       	breq	.+86     	; 0x31e <LED_Off+0x6e>
 2c8:	3a c0       	rjmp	.+116    	; 0x33e <LED_Off+0x8e>
            case PORT_A:
                CLEAR_BIT(PORTA, p_led_config_struct -> pin);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	01 80       	ldd	r0, Z+1	; 0x01
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <LED_Off+0x26>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <LED_Off+0x22>
 2da:	80 95       	com	r24
 2dc:	9b b3       	in	r25, 0x1b	; 27
 2de:	89 23       	and	r24, r25
 2e0:	8b bb       	out	0x1b, r24	; 27
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
    uint8 port_num = p_led_config_struct -> port;
    if (p_led_config_struct -> led_status == LED_OFF) {
        switch (port_num) {
            case PORT_A:
                CLEAR_BIT(PORTA, p_led_config_struct -> pin);
                break;
 2e4:	08 95       	ret
            case PORT_B:
                CLEAR_BIT(PORTB, p_led_config_struct -> pin);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	01 80       	ldd	r0, Z+1	; 0x01
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <LED_Off+0x42>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <LED_Off+0x3e>
 2f6:	80 95       	com	r24
 2f8:	98 b3       	in	r25, 0x18	; 24
 2fa:	89 23       	and	r24, r25
 2fc:	88 bb       	out	0x18, r24	; 24
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_A:
                CLEAR_BIT(PORTA, p_led_config_struct -> pin);
                break;
            case PORT_B:
                CLEAR_BIT(PORTB, p_led_config_struct -> pin);
                break;
 300:	08 95       	ret
            case PORT_C:
                CLEAR_BIT(PORTC, p_led_config_struct -> pin);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 80       	ldd	r0, Z+1	; 0x01
 308:	02 c0       	rjmp	.+4      	; 0x30e <LED_Off+0x5e>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <LED_Off+0x5a>
 312:	80 95       	com	r24
 314:	95 b3       	in	r25, 0x15	; 21
 316:	89 23       	and	r24, r25
 318:	85 bb       	out	0x15, r24	; 21
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 31a:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_B:
                CLEAR_BIT(PORTB, p_led_config_struct -> pin);
                break;
            case PORT_C:
                CLEAR_BIT(PORTC, p_led_config_struct -> pin);
                break;
 31c:	08 95       	ret
            case PORT_D:
                CLEAR_BIT(PORTD, p_led_config_struct -> pin);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 80       	ldd	r0, Z+1	; 0x01
 324:	02 c0       	rjmp	.+4      	; 0x32a <LED_Off+0x7a>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <LED_Off+0x76>
 32e:	80 95       	com	r24
 330:	92 b3       	in	r25, 0x12	; 18
 332:	89 23       	and	r24, r25
 334:	82 bb       	out	0x12, r24	; 18
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 336:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_C:
                CLEAR_BIT(PORTC, p_led_config_struct -> pin);
                break;
            case PORT_D:
                CLEAR_BIT(PORTD, p_led_config_struct -> pin);
                break;
 338:	08 95       	ret
            default:
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	08 95       	ret
                break;
            case PORT_D:
                CLEAR_BIT(PORTD, p_led_config_struct -> pin);
                break;
            default:
                return LED_PORT_INVALID;
 33e:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
}
 340:	08 95       	ret

00000342 <LED_Init>:
 * - Then it calls DIO_Init function.
 * - The initial status of the LED is then checked and accordingly it's set.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return LED_SUCCESS Initialization is done successfully.
 */
EN_LED_API_STATE LED_Init(LED_Init_t *p_led_config_struct) {
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <LED_Init+0xa>
 34c:	00 d0       	rcall	.+0      	; 0x34e <LED_Init+0xc>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	8c 01       	movw	r16, r24
    DIO_Init_t led_config = {p_led_config_struct -> port,
 354:	19 82       	std	Y+1, r1	; 0x01
 356:	1a 82       	std	Y+2, r1	; 0x02
 358:	1b 82       	std	Y+3, r1	; 0x03
 35a:	1c 82       	std	Y+4, r1	; 0x04
 35c:	fc 01       	movw	r30, r24
 35e:	80 81       	ld	r24, Z
 360:	89 83       	std	Y+1, r24	; 0x01
                      p_led_config_struct -> pin,
 362:	81 81       	ldd	r24, Z+1	; 0x01
 * - The initial status of the LED is then checked and accordingly it's set.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return LED_SUCCESS Initialization is done successfully.
 */
EN_LED_API_STATE LED_Init(LED_Init_t *p_led_config_struct) {
    DIO_Init_t led_config = {p_led_config_struct -> port,
 364:	8a 83       	std	Y+2, r24	; 0x02
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	8b 83       	std	Y+3, r24	; 0x03
                      p_led_config_struct -> pin,
                      DIO_OUTPUT};
    DIO_Init(&led_config);
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	0e 94 22 03 	call	0x644	; 0x644 <DIO_Init>
	
	if (p_led_config_struct ->led_status == LED_ON) {
 372:	f8 01       	movw	r30, r16
 374:	82 81       	ldd	r24, Z+2	; 0x02
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	21 f4       	brne	.+8      	; 0x382 <LED_Init+0x40>
		LED_On(p_led_config_struct);
 37a:	c8 01       	movw	r24, r16
 37c:	0e 94 13 01 	call	0x226	; 0x226 <LED_On>
 380:	05 c0       	rjmp	.+10     	; 0x38c <LED_Init+0x4a>
	} else if (p_led_config_struct -> led_status == LED_OFF) {
 382:	81 11       	cpse	r24, r1
 384:	03 c0       	rjmp	.+6      	; 0x38c <LED_Init+0x4a>
		LED_Off(p_led_config_struct);
 386:	c8 01       	movw	r24, r16
 388:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_Off>
	}
    return LED_SUCCESS;
}
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <PB_Init>:
 * with a constant value for the 'direction' member as DIO_INPUT.
 * - Then it calls DIO_Init function.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return PB_SUCCESS
 */
EN_PB_API_STATE PB_Init(PB_Init_t *p_pb_config_struct) {
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <PB_Init+0x6>
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <PB_Init+0x8>
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
    DIO_Init_t pb_config = {p_pb_config_struct -> port,
 3ac:	19 82       	std	Y+1, r1	; 0x01
 3ae:	1a 82       	std	Y+2, r1	; 0x02
 3b0:	1b 82       	std	Y+3, r1	; 0x03
 3b2:	1c 82       	std	Y+4, r1	; 0x04
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 81       	ld	r18, Z
 3b8:	29 83       	std	Y+1, r18	; 0x01
                             p_pb_config_struct -> pin,
 3ba:	81 81       	ldd	r24, Z+1	; 0x01
 * - Then it calls DIO_Init function.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return PB_SUCCESS
 */
EN_PB_API_STATE PB_Init(PB_Init_t *p_pb_config_struct) {
    DIO_Init_t pb_config = {p_pb_config_struct -> port,
 3bc:	8a 83       	std	Y+2, r24	; 0x02
                             p_pb_config_struct -> pin,
                             DIO_INPUT};
    DIO_Init(&pb_config);
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	0e 94 22 03 	call	0x644	; 0x644 <DIO_Init>
    return PB_SUCCESS;
}
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <PB_ReadState>:
 * and then writes the state of that bit to the 'pb_status' member of the PB_Init_t.
 * @param[in/out] p_config_struct Address of the configuration structure.
 * @return PB_PORT_INVALID The selected port doesn't corresponds to the MCU ports.
 * @return PB_SUCCESS
 */
EN_PB_API_STATE PB_ReadState(PB_Init_t *p_pb_config_struct) {
 3d6:	fc 01       	movw	r30, r24
    uint8 port_num = p_pb_config_struct -> port;
 3d8:	90 81       	ld	r25, Z
    switch (port_num) {
 3da:	91 30       	cpi	r25, 0x01	; 1
 3dc:	f1 f0       	breq	.+60     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3de:	30 f0       	brcs	.+12     	; 0x3ec <PB_ReadState+0x16>
 3e0:	92 30       	cpi	r25, 0x02	; 2
 3e2:	b1 f1       	breq	.+108    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3e4:	93 30       	cpi	r25, 0x03	; 3
 3e6:	09 f4       	brne	.+2      	; 0x3ea <PB_ReadState+0x14>
 3e8:	4e c0       	rjmp	.+156    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 3ea:	68 c0       	rjmp	.+208    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
        case PORT_A:
            if (BIT_IS_SET(PINA, p_pb_config_struct -> pin)) {
 3ec:	89 b3       	in	r24, 0x19	; 25
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	01 80       	ldd	r0, Z+1	; 0x01
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <PB_ReadState+0x22>
 3f4:	95 95       	asr	r25
 3f6:	87 95       	ror	r24
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <PB_ReadState+0x1e>
 3fc:	9c 01       	movw	r18, r24
 3fe:	21 70       	andi	r18, 0x01	; 1
 400:	33 27       	eor	r19, r19
 402:	80 ff       	sbrs	r24, 0
 404:	04 c0       	rjmp	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
                p_pb_config_struct -> pb_status = PB_HIGH;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
    uint8 port_num = p_pb_config_struct -> port;
    switch (port_num) {
        case PORT_A:
            if (BIT_IS_SET(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 40e:	23 2b       	or	r18, r19
 410:	09 f0       	breq	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	56 c0       	rjmp	.+172    	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
                p_pb_config_struct->pb_status = PB_LOW;
 414:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        case PORT_B:
            if (BIT_IS_SET(PINB, p_pb_config_struct -> pin)) {
 41a:	86 b3       	in	r24, 0x16	; 22
 41c:	21 81       	ldd	r18, Z+1	; 0x01
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	02 2e       	mov	r0, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	95 95       	asr	r25
 426:	87 95       	ror	r24
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	80 ff       	sbrs	r24, 0
 42e:	04 c0       	rjmp	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
                p_pb_config_struct -> pb_status = PB_HIGH;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret
            }
            break;
        case PORT_B:
            if (BIT_IS_SET(PINB, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 438:	89 b3       	in	r24, 0x19	; 25
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	95 95       	asr	r25
 440:	87 95       	ror	r24
 442:	2a 95       	dec	r18
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	80 fd       	sbrc	r24, 0
 448:	3d c0       	rjmp	.+122    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
                p_pb_config_struct->pb_status = PB_LOW;
 44a:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        case PORT_C:
            if (BIT_IS_SET(PINC, p_pb_config_struct -> pin)) {
 450:	83 b3       	in	r24, 0x13	; 19
 452:	21 81       	ldd	r18, Z+1	; 0x01
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 2e       	mov	r0, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	95 95       	asr	r25
 45c:	87 95       	ror	r24
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	80 ff       	sbrs	r24, 0
 464:	04 c0       	rjmp	.+8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
                p_pb_config_struct -> pb_status = PB_HIGH;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
            }
            break;
        case PORT_C:
            if (BIT_IS_SET(PINC, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 46e:	89 b3       	in	r24, 0x19	; 25
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 474:	95 95       	asr	r25
 476:	87 95       	ror	r24
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 47c:	80 fd       	sbrc	r24, 0
 47e:	24 c0       	rjmp	.+72     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
                p_pb_config_struct->pb_status = PB_LOW;
 480:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        case PORT_D:
            if (BIT_IS_SET(PIND, p_pb_config_struct -> pin)) {
 486:	80 b3       	in	r24, 0x10	; 16
 488:	21 81       	ldd	r18, Z+1	; 0x01
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 2e       	mov	r0, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 490:	95 95       	asr	r25
 492:	87 95       	ror	r24
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 498:	80 ff       	sbrs	r24, 0
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
                p_pb_config_struct -> pb_status = PB_HIGH;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret
            }
            break;
        case PORT_D:
            if (BIT_IS_SET(PIND, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 4a4:	89 b3       	in	r24, 0x19	; 25
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4aa:	95 95       	asr	r25
 4ac:	87 95       	ror	r24
 4ae:	2a 95       	dec	r18
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b2:	80 fd       	sbrc	r24, 0
 4b4:	0b c0       	rjmp	.+22     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
                p_pb_config_struct->pb_status = PB_LOW;
 4b6:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        default:
            return PB_PORT_INVALID;
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	08 95       	ret
    }
    return PB_SUCCESS;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <INT_EnableINT0>:
 * This is achieved by setting bit 6 of GICR.
 * @return INT_GLOBAL_INT_NOT_SET
 * @return INT_SUCCESS
 */
EN_INT_ERROR_STATE INT_EnableINT0() {
    if (BIT_IS_SET(SREG,7)) {
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	07 fe       	sbrs	r0, 7
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <INT_EnableINT0+0x10>
		SET_BIT(GICR,6);
 4d6:	8b b7       	in	r24, 0x3b	; 59
 4d8:	80 64       	ori	r24, 0x40	; 64
 4da:	8b bf       	out	0x3b, r24	; 59
		return INT_SUCCESS;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
    } else {
		return INT_GLOBAL_INT_NOT_SET;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 4e2:	08 95       	ret

000004e4 <INT_EnableINT1>:
 * This is achieved by setting bit 7 of GICR.
 * @return INT_GLOBAL_INT_NOT_SET
 * @return INT_SUCCESS
 */
EN_INT_ERROR_STATE INT_EnableINT1() {
    if (BIT_IS_CLEAR(SREG,7)) {
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	07 fe       	sbrs	r0, 7
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <INT_EnableINT1+0x10>
        return INT_GLOBAL_INT_NOT_SET;
    } else {
        SET_BIT(GICR,7);
 4ea:	8b b7       	in	r24, 0x3b	; 59
 4ec:	80 68       	ori	r24, 0x80	; 128
 4ee:	8b bf       	out	0x3b, r24	; 59
        return INT_SUCCESS;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	08 95       	ret
 * @return INT_GLOBAL_INT_NOT_SET
 * @return INT_SUCCESS
 */
EN_INT_ERROR_STATE INT_EnableINT1() {
    if (BIT_IS_CLEAR(SREG,7)) {
        return INT_GLOBAL_INT_NOT_SET;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
    } else {
        SET_BIT(GICR,7);
        return INT_SUCCESS;
    }
}
 4f6:	08 95       	ret

000004f8 <INT_EnableINT2>:
 * This is achieved by setting bit 5 of GICR.
 * @return INT_GLOBAL_INT_NOT_SET
 * @return INT_SUCCESS
 */
EN_INT_ERROR_STATE INT_EnableINT2() {
    if (BIT_IS_CLEAR(SREG,7)) {
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	07 fe       	sbrs	r0, 7
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <INT_EnableINT2+0x10>
        return INT_GLOBAL_INT_NOT_SET;
    } else {
        SET_BIT(GICR,5);
 4fe:	8b b7       	in	r24, 0x3b	; 59
 500:	80 62       	ori	r24, 0x20	; 32
 502:	8b bf       	out	0x3b, r24	; 59
        return INT_SUCCESS;
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	08 95       	ret
 * @return INT_GLOBAL_INT_NOT_SET
 * @return INT_SUCCESS
 */
EN_INT_ERROR_STATE INT_EnableINT2() {
    if (BIT_IS_CLEAR(SREG,7)) {
        return INT_GLOBAL_INT_NOT_SET;
 508:	81 e0       	ldi	r24, 0x01	; 1
    } else {
        SET_BIT(GICR,5);
        return INT_SUCCESS;
    }
}
 50a:	08 95       	ret

0000050c <INT_ExtIntSenseControl>:
 * Interrupt 2 sense control
 * 0 - Falling edge activates the interrupt.
 * 1 - Rising edge activates the interrupt.
*/
EN_INT_ERROR_STATE INT_ExtIntSenseControl(EN_EXT_INTERRUPT_SRC src, EN_EXT_INT_SENSE_CONTROL control) {
    switch (src) {
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	11 f1       	breq	.+68     	; 0x554 <INT_ExtIntSenseControl+0x48>
 510:	18 f0       	brcs	.+6      	; 0x518 <INT_ExtIntSenseControl+0xc>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	e9 f1       	breq	.+122    	; 0x590 <INT_ExtIntSenseControl+0x84>
 516:	4a c0       	rjmp	.+148    	; 0x5ac <INT_ExtIntSenseControl+0xa0>
        case INT0:
            switch (control) {
 518:	61 30       	cpi	r22, 0x01	; 1
 51a:	59 f0       	breq	.+22     	; 0x532 <INT_ExtIntSenseControl+0x26>
 51c:	28 f0       	brcs	.+10     	; 0x528 <INT_ExtIntSenseControl+0x1c>
 51e:	62 30       	cpi	r22, 0x02	; 2
 520:	71 f0       	breq	.+28     	; 0x53e <INT_ExtIntSenseControl+0x32>
 522:	63 30       	cpi	r22, 0x03	; 3
 524:	91 f0       	breq	.+36     	; 0x54a <INT_ExtIntSenseControl+0x3e>
 526:	44 c0       	rjmp	.+136    	; 0x5b0 <INT_ExtIntSenseControl+0xa4>
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR,ISC00);
 528:	85 b7       	in	r24, 0x35	; 53
                    CLEAR_BIT(MCUCR,ISC01);
 52a:	8c 7f       	andi	r24, 0xFC	; 252
 52c:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 52e:	80 e0       	ldi	r24, 0x00	; 0
        case INT0:
            switch (control) {
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR,ISC00);
                    CLEAR_BIT(MCUCR,ISC01);
                    break;
 530:	08 95       	ret
                case ANY_LOGIC_CHANGE:
                    SET_BIT(MCUCR,ISC00);
 532:	85 b7       	in	r24, 0x35	; 53
 534:	81 60       	ori	r24, 0x01	; 1
                    CLEAR_BIT(MCUCR,ISC01);
 536:	8d 7f       	andi	r24, 0xFD	; 253
 538:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 53a:	80 e0       	ldi	r24, 0x00	; 0
                    CLEAR_BIT(MCUCR,ISC01);
                    break;
                case ANY_LOGIC_CHANGE:
                    SET_BIT(MCUCR,ISC00);
                    CLEAR_BIT(MCUCR,ISC01);
                    break;
 53c:	08 95       	ret
                case FALLING_EDGE:
                    CLEAR_BIT(MCUCR,ISC00);
 53e:	85 b7       	in	r24, 0x35	; 53
 540:	8e 7f       	andi	r24, 0xFE	; 254
                    SET_BIT(MCUCR,ISC01);
 542:	82 60       	ori	r24, 0x02	; 2
 544:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 546:	80 e0       	ldi	r24, 0x00	; 0
                    CLEAR_BIT(MCUCR,ISC01);
                    break;
                case FALLING_EDGE:
                    CLEAR_BIT(MCUCR,ISC00);
                    SET_BIT(MCUCR,ISC01);
                    break;
 548:	08 95       	ret
                case RISING_EDGE:
                    SET_BIT(MCUCR,ISC00);
 54a:	85 b7       	in	r24, 0x35	; 53
                    SET_BIT(MCUCR,ISC01);
 54c:	83 60       	ori	r24, 0x03	; 3
 54e:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 550:	80 e0       	ldi	r24, 0x00	; 0
                    SET_BIT(MCUCR,ISC01);
                    break;
                case RISING_EDGE:
                    SET_BIT(MCUCR,ISC00);
                    SET_BIT(MCUCR,ISC01);
                    break;
 552:	08 95       	ret
            }
            break;
        case INT1:
            switch (control) {
 554:	61 30       	cpi	r22, 0x01	; 1
 556:	59 f0       	breq	.+22     	; 0x56e <INT_ExtIntSenseControl+0x62>
 558:	28 f0       	brcs	.+10     	; 0x564 <INT_ExtIntSenseControl+0x58>
 55a:	62 30       	cpi	r22, 0x02	; 2
 55c:	71 f0       	breq	.+28     	; 0x57a <INT_ExtIntSenseControl+0x6e>
 55e:	63 30       	cpi	r22, 0x03	; 3
 560:	91 f0       	breq	.+36     	; 0x586 <INT_ExtIntSenseControl+0x7a>
 562:	28 c0       	rjmp	.+80     	; 0x5b4 <INT_ExtIntSenseControl+0xa8>
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR,ISC10);
 564:	85 b7       	in	r24, 0x35	; 53
                    CLEAR_BIT(MCUCR,ISC11);
 566:	83 7f       	andi	r24, 0xF3	; 243
 568:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 56a:	80 e0       	ldi	r24, 0x00	; 0
        case INT1:
            switch (control) {
                case LOW_LEVEL:
                    CLEAR_BIT(MCUCR,ISC10);
                    CLEAR_BIT(MCUCR,ISC11);
                    break;
 56c:	08 95       	ret
                case ANY_LOGIC_CHANGE:
                    SET_BIT(MCUCR,ISC10);
 56e:	85 b7       	in	r24, 0x35	; 53
 570:	84 60       	ori	r24, 0x04	; 4
                    CLEAR_BIT(MCUCR,ISC11);
 572:	87 7f       	andi	r24, 0xF7	; 247
 574:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 576:	80 e0       	ldi	r24, 0x00	; 0
                    CLEAR_BIT(MCUCR,ISC11);
                    break;
                case ANY_LOGIC_CHANGE:
                    SET_BIT(MCUCR,ISC10);
                    CLEAR_BIT(MCUCR,ISC11);
                    break;
 578:	08 95       	ret
                case FALLING_EDGE:
                    CLEAR_BIT(MCUCR,ISC10);
 57a:	85 b7       	in	r24, 0x35	; 53
 57c:	8b 7f       	andi	r24, 0xFB	; 251
                    SET_BIT(MCUCR,ISC11);
 57e:	88 60       	ori	r24, 0x08	; 8
 580:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 582:	80 e0       	ldi	r24, 0x00	; 0
                    CLEAR_BIT(MCUCR,ISC11);
                    break;
                case FALLING_EDGE:
                    CLEAR_BIT(MCUCR,ISC10);
                    SET_BIT(MCUCR,ISC11);
                    break;
 584:	08 95       	ret
                case RISING_EDGE:
                    SET_BIT(MCUCR,ISC10);
 586:	85 b7       	in	r24, 0x35	; 53
                    SET_BIT(MCUCR,ISC11);
 588:	8c 60       	ori	r24, 0x0C	; 12
 58a:	85 bf       	out	0x35, r24	; 53
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 58c:	80 e0       	ldi	r24, 0x00	; 0
                    SET_BIT(MCUCR,ISC11);
                    break;
                case RISING_EDGE:
                    SET_BIT(MCUCR,ISC10);
                    SET_BIT(MCUCR,ISC11);
                    break;
 58e:	08 95       	ret
            }
            break;
        case INT2:
            if (control == FALLING_EDGE) {
 590:	62 30       	cpi	r22, 0x02	; 2
 592:	29 f4       	brne	.+10     	; 0x59e <INT_ExtIntSenseControl+0x92>
                CLEAR_BIT(MCUCSR,ISC2);
 594:	84 b7       	in	r24, 0x34	; 52
 596:	8f 7b       	andi	r24, 0xBF	; 191
 598:	84 bf       	out	0x34, r24	; 52
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	08 95       	ret
            }
            break;
        case INT2:
            if (control == FALLING_EDGE) {
                CLEAR_BIT(MCUCSR,ISC2);
            } else if (control == RISING_EDGE) {
 59e:	63 30       	cpi	r22, 0x03	; 3
 5a0:	59 f4       	brne	.+22     	; 0x5b8 <INT_ExtIntSenseControl+0xac>
                SET_BIT(MCUCSR, ISC2);
 5a2:	84 b7       	in	r24, 0x34	; 52
 5a4:	80 64       	ori	r24, 0x40	; 64
 5a6:	84 bf       	out	0x34, r24	; 52
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	08 95       	ret
            } else {
                return INT_INVALID_CONTROL;
            }
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	08 95       	ret
    }
    return INT_SUCCESS;
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	08 95       	ret
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
            if (control == FALLING_EDGE) {
                CLEAR_BIT(MCUCSR,ISC2);
            } else if (control == RISING_EDGE) {
                SET_BIT(MCUCSR, ISC2);
            } else {
                return INT_INVALID_CONTROL;
 5b8:	82 e0       	ldi	r24, 0x02	; 2
            break;
        default:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
}
 5ba:	08 95       	ret

000005bc <INT_ExtInterruptInit>:
 * This is achieved by calling both INT_EnableINTx and INT_ExtIntSenseControl.
 * @param ext_int_config_struct
 * @return INT_INVALID_EXTERNAL_SRC
 * @return INT_SUCCESS
 */
EN_INT_ERROR_STATE INT_ExtInterruptInit(INT_ExtInit_t *ext_int_config_struct) {
 5bc:	fc 01       	movw	r30, r24
	EN_EXT_INTERRUPT_SRC src = ext_int_config_struct -> src;
 5be:	80 81       	ld	r24, Z
    EN_EXT_INT_SENSE_CONTROL control = ext_int_config_struct -> control;
 5c0:	61 81       	ldd	r22, Z+1	; 0x01
	EN_INT_ERROR_STATE external_interrupt_state = -1;
    sei();
 5c2:	78 94       	sei
    switch (src) {
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	59 f0       	breq	.+22     	; 0x5de <INT_ExtInterruptInit+0x22>
 5c8:	18 f0       	brcs	.+6      	; 0x5d0 <INT_ExtInterruptInit+0x14>
 5ca:	82 30       	cpi	r24, 0x02	; 2
 5cc:	79 f0       	breq	.+30     	; 0x5ec <INT_ExtInterruptInit+0x30>
 5ce:	15 c0       	rjmp	.+42     	; 0x5fa <INT_ExtInterruptInit+0x3e>
        case INT0:
            INT_ExtIntSenseControl(src, control);
 5d0:	0e 94 86 02 	call	0x50c	; 0x50c <INT_ExtIntSenseControl>
			external_interrupt_state = INT_EnableINT0();
 5d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <INT_EnableINT0>
			if (external_interrupt_state == INT_GLOBAL_INT_NOT_SET) {
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	89 f4       	brne	.+34     	; 0x5fe <INT_ExtInterruptInit+0x42>
 5dc:	08 95       	ret
				return INT_GLOBAL_INT_NOT_SET;
			}
            break;
        case INT1:
            INT_ExtIntSenseControl(src, control);
 5de:	0e 94 86 02 	call	0x50c	; 0x50c <INT_ExtIntSenseControl>
			external_interrupt_state = INT_EnableINT1();
 5e2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <INT_EnableINT1>
			if (external_interrupt_state == INT_GLOBAL_INT_NOT_SET) {
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	61 f4       	brne	.+24     	; 0x602 <INT_ExtInterruptInit+0x46>
 5ea:	08 95       	ret
				return INT_GLOBAL_INT_NOT_SET;
			}
            break;
        case INT2:
            INT_ExtIntSenseControl(src, control);
 5ec:	0e 94 86 02 	call	0x50c	; 0x50c <INT_ExtIntSenseControl>
			external_interrupt_state = INT_EnableINT2();
 5f0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <INT_EnableINT2>
			if (external_interrupt_state == INT_GLOBAL_INT_NOT_SET) {
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	39 f4       	brne	.+14     	; 0x606 <INT_ExtInterruptInit+0x4a>
 5f8:	08 95       	ret
			}
            break;
        default:
            INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	08 95       	ret
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	08 95       	ret
 606:	80 e0       	ldi	r24, 0x00	; 0
}
 608:	08 95       	ret

0000060a <INT_UnitTest>:
            return INT_INVALID_EXTERNAL_SRC;
    }
    return INT_SUCCESS;
}

void INT_UnitTest(void) {
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	00 d0       	rcall	.+0      	; 0x610 <INT_UnitTest+0x6>
 610:	1f 92       	push	r1
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
	INT_ExtInit_t INT_UnitTest_config_struct;
	volatile EN_INT_ERROR_STATE INT_UnitTestError = -1;
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	8b 83       	std	Y+3, r24	; 0x03
	
	// Test case #1.
	/* Configure and enable external interrupt without first enabling the global interrupt.
	 * Expected EN_INT_ERROR_STATE is INT_GLOBAL_INT_NOT_SET which evaluates to 1.*/
	INT_UnitTest_config_struct.src = INT0;
 61a:	19 82       	std	Y+1, r1	; 0x01
	INT_UnitTest_config_struct.control = RISING_EDGE;
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	8a 83       	std	Y+2, r24	; 0x02
	INT_UnitTestError = INT_ExtInterruptInit(&INT_UnitTest_config_struct);
 620:	ce 01       	movw	r24, r28
 622:	01 96       	adiw	r24, 0x01	; 1
 624:	0e 94 de 02 	call	0x5bc	; 0x5bc <INT_ExtInterruptInit>
 628:	8b 83       	std	Y+3, r24	; 0x03
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <main>:
#include "Interrupts_Library/external_interrupts.h"


int main(void) {
	
	INT_UnitTest();
 636:	0e 94 05 03 	call	0x60a	; 0x60a <INT_UnitTest>
	
	APP_Init();
 63a:	0e 94 68 00 	call	0xd0	; 0xd0 <APP_Init>
	
	while (1)
	{
		APP_Start();
 63e:	0e 94 81 00 	call	0x102	; 0x102 <APP_Start>
 642:	fd cf       	rjmp	.-6      	; 0x63e <main+0x8>

00000644 <DIO_Init>:
 * @brief Initializes the direction of the specified pin.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return DIO_PORT_INVALID Port is invalid.
 * @return DIO_SUCCESS The pin initialization is a success.
 */
EN_DIO_ERROR_STATE DIO_Init(DIO_Init_t *p_config_struct) {
 644:	fc 01       	movw	r30, r24
    uint8 port_num = p_config_struct -> port;
 646:	90 81       	ld	r25, Z
    switch (port_num) {
 648:	91 30       	cpi	r25, 0x01	; 1
 64a:	49 f1       	breq	.+82     	; 0x69e <DIO_Init+0x5a>
 64c:	38 f0       	brcs	.+14     	; 0x65c <DIO_Init+0x18>
 64e:	92 30       	cpi	r25, 0x02	; 2
 650:	09 f4       	brne	.+2      	; 0x654 <DIO_Init+0x10>
 652:	46 c0       	rjmp	.+140    	; 0x6e0 <DIO_Init+0x9c>
 654:	93 30       	cpi	r25, 0x03	; 3
 656:	09 f4       	brne	.+2      	; 0x65a <DIO_Init+0x16>
 658:	63 c0       	rjmp	.+198    	; 0x720 <DIO_Init+0xdc>
 65a:	82 c0       	rjmp	.+260    	; 0x760 <DIO_Init+0x11c>
        case PORT_A:
            if (p_config_struct -> direction == DIO_INPUT) {
 65c:	82 81       	ldd	r24, Z+2	; 0x02
 65e:	81 11       	cpse	r24, r1
 660:	0e c0       	rjmp	.+28     	; 0x67e <DIO_Init+0x3a>
                // Clear bit.
                CLEAR_BIT(DDRA,p_config_struct -> pin);
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	01 80       	ldd	r0, Z+1	; 0x01
 668:	02 c0       	rjmp	.+4      	; 0x66e <DIO_Init+0x2a>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	0a 94       	dec	r0
 670:	e2 f7       	brpl	.-8      	; 0x66a <DIO_Init+0x26>
 672:	80 95       	com	r24
 674:	9a b3       	in	r25, 0x1a	; 26
 676:	89 23       	and	r24, r25
 678:	8a bb       	out	0x1a, r24	; 26
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	08 95       	ret
    switch (port_num) {
        case PORT_A:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRA,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	09 f0       	breq	.+2      	; 0x684 <DIO_Init+0x40>
 682:	70 c0       	rjmp	.+224    	; 0x764 <DIO_Init+0x120>
                // Set bit.
                SET_BIT(DDRA,p_config_struct -> pin);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	01 80       	ldd	r0, Z+1	; 0x01
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_Init+0x4c>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	0a 94       	dec	r0
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_Init+0x48>
 694:	9a b3       	in	r25, 0x1a	; 26
 696:	89 2b       	or	r24, r25
 698:	8a bb       	out	0x1a, r24	; 26
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	08 95       	ret
                // Set bit.
                SET_BIT(DDRA,p_config_struct -> pin);
            }
            break;
        case PORT_B:
            if (p_config_struct -> direction == DIO_INPUT) {
 69e:	82 81       	ldd	r24, Z+2	; 0x02
 6a0:	81 11       	cpse	r24, r1
 6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <DIO_Init+0x7c>
                // Clear bit.
                CLEAR_BIT(DDRB,p_config_struct -> pin);
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	01 80       	ldd	r0, Z+1	; 0x01
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_Init+0x6c>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_Init+0x68>
 6b4:	80 95       	com	r24
 6b6:	97 b3       	in	r25, 0x17	; 23
 6b8:	89 23       	and	r24, r25
 6ba:	87 bb       	out	0x17, r24	; 23
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	08 95       	ret
            break;
        case PORT_B:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRB,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	09 f0       	breq	.+2      	; 0x6c6 <DIO_Init+0x82>
 6c4:	51 c0       	rjmp	.+162    	; 0x768 <DIO_Init+0x124>
                // Set bit.
                SET_BIT(DDRB,p_config_struct -> pin);
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	01 80       	ldd	r0, Z+1	; 0x01
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_Init+0x8e>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	0a 94       	dec	r0
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_Init+0x8a>
 6d6:	97 b3       	in	r25, 0x17	; 23
 6d8:	89 2b       	or	r24, r25
 6da:	87 bb       	out	0x17, r24	; 23
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	08 95       	ret
                // Set bit.
                SET_BIT(DDRB,p_config_struct -> pin);
            }
            break;
        case PORT_C:
            if (p_config_struct -> direction == DIO_INPUT) {
 6e0:	82 81       	ldd	r24, Z+2	; 0x02
 6e2:	81 11       	cpse	r24, r1
 6e4:	0e c0       	rjmp	.+28     	; 0x702 <DIO_Init+0xbe>
                // Clear bit.
                CLEAR_BIT(DDRC,p_config_struct -> pin);
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	01 80       	ldd	r0, Z+1	; 0x01
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_Init+0xae>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	0a 94       	dec	r0
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_Init+0xaa>
 6f6:	80 95       	com	r24
 6f8:	94 b3       	in	r25, 0x14	; 20
 6fa:	89 23       	and	r24, r25
 6fc:	84 bb       	out	0x14, r24	; 20
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	08 95       	ret
            break;
        case PORT_C:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRC,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 702:	81 30       	cpi	r24, 0x01	; 1
 704:	99 f5       	brne	.+102    	; 0x76c <DIO_Init+0x128>
                // Set bit.
                SET_BIT(DDRC,p_config_struct -> pin);
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	01 80       	ldd	r0, Z+1	; 0x01
 70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_Init+0xce>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	0a 94       	dec	r0
 714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_Init+0xca>
 716:	94 b3       	in	r25, 0x14	; 20
 718:	89 2b       	or	r24, r25
 71a:	84 bb       	out	0x14, r24	; 20
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	08 95       	ret
                // Set bit.
                SET_BIT(DDRC,p_config_struct -> pin);
            }
            break;
        case PORT_D:
            if (p_config_struct -> direction == DIO_INPUT) {
 720:	82 81       	ldd	r24, Z+2	; 0x02
 722:	81 11       	cpse	r24, r1
 724:	0e c0       	rjmp	.+28     	; 0x742 <DIO_Init+0xfe>
                // Clear bit.
                CLEAR_BIT(DDRD,p_config_struct -> pin);
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	01 80       	ldd	r0, Z+1	; 0x01
 72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_Init+0xee>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_Init+0xea>
 736:	80 95       	com	r24
 738:	91 b3       	in	r25, 0x11	; 17
 73a:	89 23       	and	r24, r25
 73c:	81 bb       	out	0x11, r24	; 17
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	08 95       	ret
            break;
        case PORT_D:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRD,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	a9 f4       	brne	.+42     	; 0x770 <DIO_Init+0x12c>
                // Set bit.
                SET_BIT(DDRD,p_config_struct -> pin);
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	01 80       	ldd	r0, Z+1	; 0x01
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_Init+0x10e>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	0a 94       	dec	r0
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_Init+0x10a>
 756:	91 b3       	in	r25, 0x11	; 17
 758:	89 2b       	or	r24, r25
 75a:	81 bb       	out	0x11, r24	; 17
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	08 95       	ret
                // Set bit.
                SET_BIT(DDRD,p_config_struct -> pin);
            }
            break;
        default:
            return DIO_PORT_INVALID;
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	08 95       	ret
    }
    return DIO_SUCCESS;
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	08 95       	ret
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	08 95       	ret
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	08 95       	ret
 770:	80 e0       	ldi	r24, 0x00	; 0
}
 772:	08 95       	ret

00000774 <__tablejump2__>:
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	05 90       	lpm	r0, Z+
 77a:	f4 91       	lpm	r31, Z
 77c:	e0 2d       	mov	r30, r0
 77e:	09 94       	ijmp

00000780 <_exit>:
 780:	f8 94       	cli

00000782 <__stop_program>:
 782:	ff cf       	rjmp	.-2      	; 0x782 <__stop_program>
