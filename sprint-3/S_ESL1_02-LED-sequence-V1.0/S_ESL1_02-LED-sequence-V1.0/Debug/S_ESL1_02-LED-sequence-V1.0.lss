
S_ESL1_02-LED-sequence-V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000061c  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141c  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000996  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc2  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000687  00000000  00000000  000032c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078b  00000000  00000000  0000394b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000040d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 02 	call	0x4de	; 0x4de <main>
  8a:	0c 94 0c 03 	jmp	0x618	; 0x618 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:

uint8 counter = 0;

void APP_Init() {

	LED_Init(&LED0);
  92:	8d e6       	ldi	r24, 0x6D	; 109
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 a8 01 	call	0x350	; 0x350 <LED_Init>
	LED_Init(&LED1);
  9a:	89 e6       	ldi	r24, 0x69	; 105
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 a8 01 	call	0x350	; 0x350 <LED_Init>
	LED_Init(&LED2);
  a2:	86 e6       	ldi	r24, 0x66	; 102
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 a8 01 	call	0x350	; 0x350 <LED_Init>
	LED_Init(&LED3);
  aa:	83 e6       	ldi	r24, 0x63	; 99
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 a8 01 	call	0x350	; 0x350 <LED_Init>

	PB_Init(&PB0);
  b2:	80 e6       	ldi	r24, 0x60	; 96
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <PB_Init>
  ba:	08 95       	ret

000000bc <APP_Start>:
}

void APP_Start() {
    PB_ReadState(&PB0);
  bc:	80 e6       	ldi	r24, 0x60	; 96
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
    if (PB0.pb_status == PB_HIGH) {
  c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	09 f0       	breq	.+2      	; 0xce <APP_Start+0x12>
  cc:	ae c0       	rjmp	.+348    	; 0x22a <APP_Start+0x16e>
        if (counter <= 3) {
  ce:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	08 f0       	brcs	.+2      	; 0xd8 <APP_Start+0x1c>
  d6:	51 c0       	rjmp	.+162    	; 0x17a <APP_Start+0xbe>
            switch (counter) {
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	b9 f0       	breq	.+46     	; 0x10a <APP_Start+0x4e>
  dc:	28 f0       	brcs	.+10     	; 0xe8 <APP_Start+0x2c>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	29 f1       	breq	.+74     	; 0x12c <APP_Start+0x70>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	a1 f1       	breq	.+104    	; 0x14e <APP_Start+0x92>
  e6:	43 c0       	rjmp	.+134    	; 0x16e <APP_Start+0xb2>
                case 0:
					LED0.led_status = LED_ON;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <LED0+0x2>
                    LED_On(&LED0);
  ee:	8d e6       	ldi	r24, 0x6D	; 109
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 1a 01 	call	0x234	; 0x234 <LED_On>
					while (PB0.pb_status == PB_HIGH) {
  f6:	04 c0       	rjmp	.+8      	; 0x100 <APP_Start+0x44>
						PB_ReadState(&PB0);
  f8:	80 e6       	ldi	r24, 0x60	; 96
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
        if (counter <= 3) {
            switch (counter) {
                case 0:
					LED0.led_status = LED_ON;
                    LED_On(&LED0);
					while (PB0.pb_status == PB_HIGH) {
 100:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	c1 f3       	breq	.-16     	; 0xf8 <APP_Start+0x3c>
 108:	32 c0       	rjmp	.+100    	; 0x16e <APP_Start+0xb2>
						PB_ReadState(&PB0);
					}
                    break;
                case 1:
					LED1.led_status = LED_ON;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <LED1+0x2>
                    LED_On(&LED1);
 110:	89 e6       	ldi	r24, 0x69	; 105
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 1a 01 	call	0x234	; 0x234 <LED_On>
					while (PB0.pb_status == PB_HIGH) {
 118:	04 c0       	rjmp	.+8      	; 0x122 <APP_Start+0x66>
						PB_ReadState(&PB0);
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
					}
                    break;
                case 1:
					LED1.led_status = LED_ON;
                    LED_On(&LED1);
					while (PB0.pb_status == PB_HIGH) {
 122:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	c1 f3       	breq	.-16     	; 0x11a <APP_Start+0x5e>
 12a:	21 c0       	rjmp	.+66     	; 0x16e <APP_Start+0xb2>
						PB_ReadState(&PB0);
					}
                    break;
                case 2:
					LED2.led_status = LED_ON;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LED2+0x2>
                    LED_On(&LED2);
 132:	86 e6       	ldi	r24, 0x66	; 102
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 1a 01 	call	0x234	; 0x234 <LED_On>
					while (PB0.pb_status == PB_HIGH) {
 13a:	04 c0       	rjmp	.+8      	; 0x144 <APP_Start+0x88>
						PB_ReadState(&PB0);
 13c:	80 e6       	ldi	r24, 0x60	; 96
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
					}
                    break;
                case 2:
					LED2.led_status = LED_ON;
                    LED_On(&LED2);
					while (PB0.pb_status == PB_HIGH) {
 144:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	c1 f3       	breq	.-16     	; 0x13c <APP_Start+0x80>
 14c:	10 c0       	rjmp	.+32     	; 0x16e <APP_Start+0xb2>
						PB_ReadState(&PB0);
					}
                    break;
                case 3:
					LED3.led_status = LED_ON;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <LED3+0x2>
                    LED_On(&LED3);
 154:	83 e6       	ldi	r24, 0x63	; 99
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 1a 01 	call	0x234	; 0x234 <LED_On>
					while (PB0.pb_status == PB_HIGH) {
 15c:	04 c0       	rjmp	.+8      	; 0x166 <APP_Start+0xaa>
						PB_ReadState(&PB0);
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
					}
                    break;
                case 3:
					LED3.led_status = LED_ON;
                    LED_On(&LED3);
					while (PB0.pb_status == PB_HIGH) {
 166:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	c1 f3       	breq	.-16     	; 0x15e <APP_Start+0xa2>
						PB_ReadState(&PB0);
					}
                    break;
            }
            counter++;
 16e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 178:	08 95       	ret
        } else if (counter > 3 && counter < 8) {
 17a:	84 50       	subi	r24, 0x04	; 4
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	08 f0       	brcs	.+2      	; 0x182 <APP_Start+0xc6>
 180:	4d c0       	rjmp	.+154    	; 0x21c <APP_Start+0x160>
            uint8 led_num = counter - 4;
            switch (led_num) {
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	b1 f0       	breq	.+44     	; 0x1b2 <APP_Start+0xf6>
 186:	28 f0       	brcs	.+10     	; 0x192 <APP_Start+0xd6>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	19 f1       	breq	.+70     	; 0x1d2 <APP_Start+0x116>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	89 f1       	breq	.+98     	; 0x1f2 <APP_Start+0x136>
 190:	3f c0       	rjmp	.+126    	; 0x210 <APP_Start+0x154>
                case 0:
					LED0.led_status = LED_OFF;
 192:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <LED0+0x2>
                    LED_Off(&LED0);
 196:	8d e6       	ldi	r24, 0x6D	; 109
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_Off>
					while (PB0.pb_status == PB_HIGH) {
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <APP_Start+0xec>
						PB_ReadState(&PB0);
 1a0:	80 e6       	ldi	r24, 0x60	; 96
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
            uint8 led_num = counter - 4;
            switch (led_num) {
                case 0:
					LED0.led_status = LED_OFF;
                    LED_Off(&LED0);
					while (PB0.pb_status == PB_HIGH) {
 1a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	c1 f3       	breq	.-16     	; 0x1a0 <APP_Start+0xe4>
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <APP_Start+0x154>
						PB_ReadState(&PB0);
					}
                    break;
                case 1:
					LED1.led_status = LED_OFF;
 1b2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <LED1+0x2>
                    LED_Off(&LED1);
 1b6:	89 e6       	ldi	r24, 0x69	; 105
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_Off>
					while (PB0.pb_status == PB_HIGH) {
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <APP_Start+0x10c>
						PB_ReadState(&PB0);
 1c0:	80 e6       	ldi	r24, 0x60	; 96
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
					}
                    break;
                case 1:
					LED1.led_status = LED_OFF;
                    LED_Off(&LED1);
					while (PB0.pb_status == PB_HIGH) {
 1c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	c1 f3       	breq	.-16     	; 0x1c0 <APP_Start+0x104>
 1d0:	1f c0       	rjmp	.+62     	; 0x210 <APP_Start+0x154>
						PB_ReadState(&PB0);
					}
                    break;
                case 2:
					LED2.led_status = LED_OFF;
 1d2:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LED2+0x2>
                    LED_Off(&LED2);
 1d6:	86 e6       	ldi	r24, 0x66	; 102
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_Off>
					while (PB0.pb_status == PB_HIGH) {
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <APP_Start+0x12c>
						PB_ReadState(&PB0);
 1e0:	80 e6       	ldi	r24, 0x60	; 96
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
					}
                    break;
                case 2:
					LED2.led_status = LED_OFF;
                    LED_Off(&LED2);
					while (PB0.pb_status == PB_HIGH) {
 1e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	c1 f3       	breq	.-16     	; 0x1e0 <APP_Start+0x124>
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <APP_Start+0x154>
						PB_ReadState(&PB0);
					}
                    break;
                case 3:
					LED3.led_status = LED_OFF;
 1f2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <LED3+0x2>
                    LED_Off(&LED3);
 1f6:	83 e6       	ldi	r24, 0x63	; 99
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_Off>
					while (PB0.pb_status == PB_HIGH) {
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <APP_Start+0x14c>
						PB_ReadState(&PB0);
 200:	80 e6       	ldi	r24, 0x60	; 96
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
					}
                    break;
                case 3:
					LED3.led_status = LED_OFF;
                    LED_Off(&LED3);
					while (PB0.pb_status == PB_HIGH) {
 208:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	c1 f3       	breq	.-16     	; 0x200 <APP_Start+0x144>
						PB_ReadState(&PB0);
					}
                    break;
            }
            counter++;
 210:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 21a:	08 95       	ret
        } else {
            counter = 0;
 21c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 220:	08 95       	ret
        }
    } else {
        while (PB0.pb_status == PB_LOW) {
            PB_ReadState(&PB0);
 222:	80 e6       	ldi	r24, 0x60	; 96
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <PB_ReadState>
            counter++;
        } else {
            counter = 0;
        }
    } else {
        while (PB0.pb_status == PB_LOW) {
 22a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 22e:	88 23       	and	r24, r24
 230:	c1 f3       	breq	.-16     	; 0x222 <APP_Start+0x166>
 232:	08 95       	ret

00000234 <LED_On>:
 * The function first checks if the status of the led, an accordingly turns on the LED.
 * @return LED_PORT_INVALID
 * @return LED_STATUS_INVALID
 * @return LED_SUCCESS
 */
EN_LED_API_STATE LED_On(LED_Init_t *p_led_config_struct) {
 234:	fc 01       	movw	r30, r24
    uint8 port_num = p_led_config_struct -> port;
 236:	90 81       	ld	r25, Z
    if (p_led_config_struct -> led_status == LED_ON) {
 238:	82 81       	ldd	r24, Z+2	; 0x02
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	e1 f5       	brne	.+120    	; 0x2b6 <LED_On+0x82>
        switch (port_num) {
 23e:	91 30       	cpi	r25, 0x01	; 1
 240:	99 f0       	breq	.+38     	; 0x268 <LED_On+0x34>
 242:	28 f0       	brcs	.+10     	; 0x24e <LED_On+0x1a>
 244:	92 30       	cpi	r25, 0x02	; 2
 246:	e9 f0       	breq	.+58     	; 0x282 <LED_On+0x4e>
 248:	93 30       	cpi	r25, 0x03	; 3
 24a:	41 f1       	breq	.+80     	; 0x29c <LED_On+0x68>
 24c:	36 c0       	rjmp	.+108    	; 0x2ba <LED_On+0x86>
            case PORT_A:
                SET_BIT(PORTA, p_led_config_struct -> pin);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	01 80       	ldd	r0, Z+1	; 0x01
 254:	02 c0       	rjmp	.+4      	; 0x25a <LED_On+0x26>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <LED_On+0x22>
 25e:	9b b3       	in	r25, 0x1b	; 27
 260:	89 2b       	or	r24, r25
 262:	8b bb       	out	0x1b, r24	; 27
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 264:	80 e0       	ldi	r24, 0x00	; 0
    uint8 port_num = p_led_config_struct -> port;
    if (p_led_config_struct -> led_status == LED_ON) {
        switch (port_num) {
            case PORT_A:
                SET_BIT(PORTA, p_led_config_struct -> pin);
                break;
 266:	08 95       	ret
            case PORT_B:
                SET_BIT(PORTB, p_led_config_struct -> pin);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	01 80       	ldd	r0, Z+1	; 0x01
 26e:	02 c0       	rjmp	.+4      	; 0x274 <LED_On+0x40>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <LED_On+0x3c>
 278:	98 b3       	in	r25, 0x18	; 24
 27a:	89 2b       	or	r24, r25
 27c:	88 bb       	out	0x18, r24	; 24
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 27e:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_A:
                SET_BIT(PORTA, p_led_config_struct -> pin);
                break;
            case PORT_B:
                SET_BIT(PORTB, p_led_config_struct -> pin);
                break;
 280:	08 95       	ret
            case PORT_C:
                SET_BIT(PORTC, p_led_config_struct -> pin);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	01 80       	ldd	r0, Z+1	; 0x01
 288:	02 c0       	rjmp	.+4      	; 0x28e <LED_On+0x5a>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <LED_On+0x56>
 292:	95 b3       	in	r25, 0x15	; 21
 294:	89 2b       	or	r24, r25
 296:	85 bb       	out	0x15, r24	; 21
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 298:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_B:
                SET_BIT(PORTB, p_led_config_struct -> pin);
                break;
            case PORT_C:
                SET_BIT(PORTC, p_led_config_struct -> pin);
                break;
 29a:	08 95       	ret
            case PORT_D:
                SET_BIT(PORTD, p_led_config_struct -> pin);
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 80       	ldd	r0, Z+1	; 0x01
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <LED_On+0x74>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <LED_On+0x70>
 2ac:	92 b3       	in	r25, 0x12	; 18
 2ae:	89 2b       	or	r24, r25
 2b0:	82 bb       	out	0x12, r24	; 18
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_C:
                SET_BIT(PORTC, p_led_config_struct -> pin);
                break;
            case PORT_D:
                SET_BIT(PORTD, p_led_config_struct -> pin);
                break;
 2b4:	08 95       	ret
            default:
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	08 95       	ret
                break;
            case PORT_D:
                SET_BIT(PORTD, p_led_config_struct -> pin);
                break;
            default:
                return LED_PORT_INVALID;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
}
 2bc:	08 95       	ret

000002be <LED_Off>:
 * The function first checks if the status of the led, an accordingly turns on the LED.
 * @return LED_PORT_INVALID
 * @return LED_STATUS_INVALID
 * @return LED_SUCCESS
 */
EN_LED_API_STATE LED_Off(LED_Init_t *p_led_config_struct) {
 2be:	fc 01       	movw	r30, r24
    uint8 port_num = p_led_config_struct -> port;
 2c0:	90 81       	ld	r25, Z
    if (p_led_config_struct -> led_status == LED_OFF) {
 2c2:	82 81       	ldd	r24, Z+2	; 0x02
 2c4:	81 11       	cpse	r24, r1
 2c6:	40 c0       	rjmp	.+128    	; 0x348 <LED_Off+0x8a>
        switch (port_num) {
 2c8:	91 30       	cpi	r25, 0x01	; 1
 2ca:	a1 f0       	breq	.+40     	; 0x2f4 <LED_Off+0x36>
 2cc:	28 f0       	brcs	.+10     	; 0x2d8 <LED_Off+0x1a>
 2ce:	92 30       	cpi	r25, 0x02	; 2
 2d0:	f9 f0       	breq	.+62     	; 0x310 <LED_Off+0x52>
 2d2:	93 30       	cpi	r25, 0x03	; 3
 2d4:	59 f1       	breq	.+86     	; 0x32c <LED_Off+0x6e>
 2d6:	3a c0       	rjmp	.+116    	; 0x34c <LED_Off+0x8e>
            case PORT_A:
                CLEAR_BIT(PORTA, p_led_config_struct -> pin);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 80       	ldd	r0, Z+1	; 0x01
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <LED_Off+0x26>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <LED_Off+0x22>
 2e8:	80 95       	com	r24
 2ea:	9b b3       	in	r25, 0x1b	; 27
 2ec:	89 23       	and	r24, r25
 2ee:	8b bb       	out	0x1b, r24	; 27
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
    uint8 port_num = p_led_config_struct -> port;
    if (p_led_config_struct -> led_status == LED_OFF) {
        switch (port_num) {
            case PORT_A:
                CLEAR_BIT(PORTA, p_led_config_struct -> pin);
                break;
 2f2:	08 95       	ret
            case PORT_B:
                CLEAR_BIT(PORTB, p_led_config_struct -> pin);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	01 80       	ldd	r0, Z+1	; 0x01
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <LED_Off+0x42>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <LED_Off+0x3e>
 304:	80 95       	com	r24
 306:	98 b3       	in	r25, 0x18	; 24
 308:	89 23       	and	r24, r25
 30a:	88 bb       	out	0x18, r24	; 24
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 30c:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_A:
                CLEAR_BIT(PORTA, p_led_config_struct -> pin);
                break;
            case PORT_B:
                CLEAR_BIT(PORTB, p_led_config_struct -> pin);
                break;
 30e:	08 95       	ret
            case PORT_C:
                CLEAR_BIT(PORTC, p_led_config_struct -> pin);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	01 80       	ldd	r0, Z+1	; 0x01
 316:	02 c0       	rjmp	.+4      	; 0x31c <LED_Off+0x5e>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <LED_Off+0x5a>
 320:	80 95       	com	r24
 322:	95 b3       	in	r25, 0x15	; 21
 324:	89 23       	and	r24, r25
 326:	85 bb       	out	0x15, r24	; 21
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 328:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_B:
                CLEAR_BIT(PORTB, p_led_config_struct -> pin);
                break;
            case PORT_C:
                CLEAR_BIT(PORTC, p_led_config_struct -> pin);
                break;
 32a:	08 95       	ret
            case PORT_D:
                CLEAR_BIT(PORTD, p_led_config_struct -> pin);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 80       	ldd	r0, Z+1	; 0x01
 332:	02 c0       	rjmp	.+4      	; 0x338 <LED_Off+0x7a>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <LED_Off+0x76>
 33c:	80 95       	com	r24
 33e:	92 b3       	in	r25, 0x12	; 18
 340:	89 23       	and	r24, r25
 342:	82 bb       	out	0x12, r24	; 18
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
 344:	80 e0       	ldi	r24, 0x00	; 0
            case PORT_C:
                CLEAR_BIT(PORTC, p_led_config_struct -> pin);
                break;
            case PORT_D:
                CLEAR_BIT(PORTD, p_led_config_struct -> pin);
                break;
 346:	08 95       	ret
            default:
                return LED_PORT_INVALID;
        }
    } else {
        return LED_STATUS_INVALID;
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	08 95       	ret
                break;
            case PORT_D:
                CLEAR_BIT(PORTD, p_led_config_struct -> pin);
                break;
            default:
                return LED_PORT_INVALID;
 34c:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return LED_STATUS_INVALID;
    }
    return LED_SUCCESS;
}
 34e:	08 95       	ret

00000350 <LED_Init>:
 * - Then it calls DIO_Init function.
 * - The initial status of the LED is then checked and accordingly it's set.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return LED_SUCCESS Initialization is done successfully.
 */
EN_LED_API_STATE LED_Init(LED_Init_t *p_led_config_struct) {
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	00 d0       	rcall	.+0      	; 0x35a <LED_Init+0xa>
 35a:	00 d0       	rcall	.+0      	; 0x35c <LED_Init+0xc>
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	8c 01       	movw	r16, r24
    DIO_Init_t led_config = {p_led_config_struct -> port,
 362:	19 82       	std	Y+1, r1	; 0x01
 364:	1a 82       	std	Y+2, r1	; 0x02
 366:	1b 82       	std	Y+3, r1	; 0x03
 368:	1c 82       	std	Y+4, r1	; 0x04
 36a:	fc 01       	movw	r30, r24
 36c:	80 81       	ld	r24, Z
 36e:	89 83       	std	Y+1, r24	; 0x01
                      p_led_config_struct -> pin,
 370:	81 81       	ldd	r24, Z+1	; 0x01
 * - The initial status of the LED is then checked and accordingly it's set.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return LED_SUCCESS Initialization is done successfully.
 */
EN_LED_API_STATE LED_Init(LED_Init_t *p_led_config_struct) {
    DIO_Init_t led_config = {p_led_config_struct -> port,
 372:	8a 83       	std	Y+2, r24	; 0x02
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	8b 83       	std	Y+3, r24	; 0x03
                      p_led_config_struct -> pin,
                      DIO_OUTPUT};
    DIO_Init(&led_config);
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <DIO_Init>
	
	if (p_led_config_struct ->led_status == LED_ON) {
 380:	f8 01       	movw	r30, r16
 382:	82 81       	ldd	r24, Z+2	; 0x02
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	21 f4       	brne	.+8      	; 0x390 <LED_Init+0x40>
		LED_On(p_led_config_struct);
 388:	c8 01       	movw	r24, r16
 38a:	0e 94 1a 01 	call	0x234	; 0x234 <LED_On>
 38e:	05 c0       	rjmp	.+10     	; 0x39a <LED_Init+0x4a>
	} else if (p_led_config_struct -> led_status == LED_OFF) {
 390:	81 11       	cpse	r24, r1
 392:	03 c0       	rjmp	.+6      	; 0x39a <LED_Init+0x4a>
		LED_Off(p_led_config_struct);
 394:	c8 01       	movw	r24, r16
 396:	0e 94 5f 01 	call	0x2be	; 0x2be <LED_Off>
	}
    return LED_SUCCESS;
}
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <PB_Init>:
 * with a constant value for the 'direction' member as DIO_INPUT.
 * - Then it calls DIO_Init function.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return PB_SUCCESS
 */
EN_PB_API_STATE PB_Init(PB_Init_t *p_pb_config_struct) {
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <PB_Init+0x6>
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <PB_Init+0x8>
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
    DIO_Init_t pb_config = {p_pb_config_struct -> port,
 3ba:	19 82       	std	Y+1, r1	; 0x01
 3bc:	1a 82       	std	Y+2, r1	; 0x02
 3be:	1b 82       	std	Y+3, r1	; 0x03
 3c0:	1c 82       	std	Y+4, r1	; 0x04
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 81       	ld	r18, Z
 3c6:	29 83       	std	Y+1, r18	; 0x01
                             p_pb_config_struct -> pin,
 3c8:	81 81       	ldd	r24, Z+1	; 0x01
 * - Then it calls DIO_Init function.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return PB_SUCCESS
 */
EN_PB_API_STATE PB_Init(PB_Init_t *p_pb_config_struct) {
    DIO_Init_t pb_config = {p_pb_config_struct -> port,
 3ca:	8a 83       	std	Y+2, r24	; 0x02
                             p_pb_config_struct -> pin,
                             DIO_INPUT};
    DIO_Init(&pb_config);
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <DIO_Init>
    return PB_SUCCESS;
}
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <PB_ReadState>:
 * and then writes the state of that bit to the 'pb_status' member of the PB_Init_t.
 * @param[in/out] p_config_struct Address of the configuration structure.
 * @return PB_PORT_INVALID The selected port doesn't corresponds to the MCU ports.
 * @return PB_SUCCESS
 */
EN_PB_API_STATE PB_ReadState(PB_Init_t *p_pb_config_struct) {
 3e4:	fc 01       	movw	r30, r24
    uint8 port_num = p_pb_config_struct -> port;
 3e6:	90 81       	ld	r25, Z
    switch (port_num) {
 3e8:	91 30       	cpi	r25, 0x01	; 1
 3ea:	f1 f0       	breq	.+60     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3ec:	30 f0       	brcs	.+12     	; 0x3fa <PB_ReadState+0x16>
 3ee:	92 30       	cpi	r25, 0x02	; 2
 3f0:	b1 f1       	breq	.+108    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 3f2:	93 30       	cpi	r25, 0x03	; 3
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <PB_ReadState+0x14>
 3f6:	4e c0       	rjmp	.+156    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 3f8:	68 c0       	rjmp	.+208    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
        case PORT_A:
            if (BIT_IS_SET(PINA, p_pb_config_struct -> pin)) {
 3fa:	89 b3       	in	r24, 0x19	; 25
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 80       	ldd	r0, Z+1	; 0x01
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	95 95       	asr	r25
 404:	87 95       	ror	r24
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	9c 01       	movw	r18, r24
 40c:	21 70       	andi	r18, 0x01	; 1
 40e:	33 27       	eor	r19, r19
 410:	80 ff       	sbrs	r24, 0
 412:	04 c0       	rjmp	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
                p_pb_config_struct -> pb_status = PB_HIGH;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
    uint8 port_num = p_pb_config_struct -> port;
    switch (port_num) {
        case PORT_A:
            if (BIT_IS_SET(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 41c:	23 2b       	or	r18, r19
 41e:	09 f0       	breq	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	56 c0       	rjmp	.+172    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
                p_pb_config_struct->pb_status = PB_LOW;
 422:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        case PORT_B:
            if (BIT_IS_SET(PINB, p_pb_config_struct -> pin)) {
 428:	86 b3       	in	r24, 0x16	; 22
 42a:	21 81       	ldd	r18, Z+1	; 0x01
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 2e       	mov	r0, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 432:	95 95       	asr	r25
 434:	87 95       	ror	r24
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	80 ff       	sbrs	r24, 0
 43c:	04 c0       	rjmp	.+8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
                p_pb_config_struct -> pb_status = PB_HIGH;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret
            }
            break;
        case PORT_B:
            if (BIT_IS_SET(PINB, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 446:	89 b3       	in	r24, 0x19	; 25
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	95 95       	asr	r25
 44e:	87 95       	ror	r24
 450:	2a 95       	dec	r18
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	80 fd       	sbrc	r24, 0
 456:	3d c0       	rjmp	.+122    	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                p_pb_config_struct->pb_status = PB_LOW;
 458:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        case PORT_C:
            if (BIT_IS_SET(PINC, p_pb_config_struct -> pin)) {
 45e:	83 b3       	in	r24, 0x13	; 19
 460:	21 81       	ldd	r18, Z+1	; 0x01
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 2e       	mov	r0, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 468:	95 95       	asr	r25
 46a:	87 95       	ror	r24
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 470:	80 ff       	sbrs	r24, 0
 472:	04 c0       	rjmp	.+8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
                p_pb_config_struct -> pb_status = PB_HIGH;
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	08 95       	ret
            }
            break;
        case PORT_C:
            if (BIT_IS_SET(PINC, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 47c:	89 b3       	in	r24, 0x19	; 25
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	2a 95       	dec	r18
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	80 fd       	sbrc	r24, 0
 48c:	24 c0       	rjmp	.+72     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
                p_pb_config_struct->pb_status = PB_LOW;
 48e:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        case PORT_D:
            if (BIT_IS_SET(PIND, p_pb_config_struct -> pin)) {
 494:	80 b3       	in	r24, 0x10	; 16
 496:	21 81       	ldd	r18, Z+1	; 0x01
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 2e       	mov	r0, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 4a6:	80 ff       	sbrs	r24, 0
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
                p_pb_config_struct -> pb_status = PB_HIGH;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	82 83       	std	Z+2, r24	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	08 95       	ret
            }
            break;
        case PORT_D:
            if (BIT_IS_SET(PIND, p_pb_config_struct -> pin)) {
                p_pb_config_struct -> pb_status = PB_HIGH;
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
 4b2:	89 b3       	in	r24, 0x19	; 25
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b8:	95 95       	asr	r25
 4ba:	87 95       	ror	r24
 4bc:	2a 95       	dec	r18
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4c0:	80 fd       	sbrc	r24, 0
 4c2:	0b c0       	rjmp	.+22     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
                p_pb_config_struct->pb_status = PB_LOW;
 4c4:	12 82       	std	Z+2, r1	; 0x02
            }
            break;
        default:
            return PB_PORT_INVALID;
    }
    return PB_SUCCESS;
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret
            } else if (BIT_IS_CLEAR(PINA, p_pb_config_struct -> pin)) {
                p_pb_config_struct->pb_status = PB_LOW;
            }
            break;
        default:
            return PB_PORT_INVALID;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	08 95       	ret
    }
    return PB_SUCCESS;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret

000004de <main>:


#include "Application/led_sequence.h"

int main(void) {
	APP_Init();
 4de:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
	
	while (1)
	{
		APP_Start();
 4e2:	0e 94 5e 00 	call	0xbc	; 0xbc <APP_Start>
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <main+0x4>

000004e8 <DIO_Init>:
 * @brief Initializes the direction of the specified pin.
 * @param[in] p_config_struct Address of the configuration structure.
 * @return DIO_PORT_INVALID Port is invalid.
 * @return DIO_SUCCESS The pin initialization is a success.
 */
EN_DIO_ERROR_STATE DIO_Init(DIO_Init_t *p_config_struct) {
 4e8:	fc 01       	movw	r30, r24
    uint8 port_num = p_config_struct -> port;
 4ea:	90 81       	ld	r25, Z
    switch (port_num) {
 4ec:	91 30       	cpi	r25, 0x01	; 1
 4ee:	49 f1       	breq	.+82     	; 0x542 <DIO_Init+0x5a>
 4f0:	38 f0       	brcs	.+14     	; 0x500 <DIO_Init+0x18>
 4f2:	92 30       	cpi	r25, 0x02	; 2
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <DIO_Init+0x10>
 4f6:	46 c0       	rjmp	.+140    	; 0x584 <DIO_Init+0x9c>
 4f8:	93 30       	cpi	r25, 0x03	; 3
 4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_Init+0x16>
 4fc:	63 c0       	rjmp	.+198    	; 0x5c4 <DIO_Init+0xdc>
 4fe:	82 c0       	rjmp	.+260    	; 0x604 <DIO_Init+0x11c>
        case PORT_A:
            if (p_config_struct -> direction == DIO_INPUT) {
 500:	82 81       	ldd	r24, Z+2	; 0x02
 502:	81 11       	cpse	r24, r1
 504:	0e c0       	rjmp	.+28     	; 0x522 <DIO_Init+0x3a>
                // Clear bit.
                CLEAR_BIT(DDRA,p_config_struct -> pin);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	01 80       	ldd	r0, Z+1	; 0x01
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_Init+0x2a>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_Init+0x26>
 516:	80 95       	com	r24
 518:	9a b3       	in	r25, 0x1a	; 26
 51a:	89 23       	and	r24, r25
 51c:	8a bb       	out	0x1a, r24	; 26
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	08 95       	ret
    switch (port_num) {
        case PORT_A:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRA,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	09 f0       	breq	.+2      	; 0x528 <DIO_Init+0x40>
 526:	70 c0       	rjmp	.+224    	; 0x608 <DIO_Init+0x120>
                // Set bit.
                SET_BIT(DDRA,p_config_struct -> pin);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	01 80       	ldd	r0, Z+1	; 0x01
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_Init+0x4c>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_Init+0x48>
 538:	9a b3       	in	r25, 0x1a	; 26
 53a:	89 2b       	or	r24, r25
 53c:	8a bb       	out	0x1a, r24	; 26
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	08 95       	ret
                // Set bit.
                SET_BIT(DDRA,p_config_struct -> pin);
            }
            break;
        case PORT_B:
            if (p_config_struct -> direction == DIO_INPUT) {
 542:	82 81       	ldd	r24, Z+2	; 0x02
 544:	81 11       	cpse	r24, r1
 546:	0e c0       	rjmp	.+28     	; 0x564 <DIO_Init+0x7c>
                // Clear bit.
                CLEAR_BIT(DDRB,p_config_struct -> pin);
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	01 80       	ldd	r0, Z+1	; 0x01
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_Init+0x6c>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	0a 94       	dec	r0
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_Init+0x68>
 558:	80 95       	com	r24
 55a:	97 b3       	in	r25, 0x17	; 23
 55c:	89 23       	and	r24, r25
 55e:	87 bb       	out	0x17, r24	; 23
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	08 95       	ret
            break;
        case PORT_B:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRB,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 564:	81 30       	cpi	r24, 0x01	; 1
 566:	09 f0       	breq	.+2      	; 0x56a <DIO_Init+0x82>
 568:	51 c0       	rjmp	.+162    	; 0x60c <DIO_Init+0x124>
                // Set bit.
                SET_BIT(DDRB,p_config_struct -> pin);
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	01 80       	ldd	r0, Z+1	; 0x01
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_Init+0x8e>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_Init+0x8a>
 57a:	97 b3       	in	r25, 0x17	; 23
 57c:	89 2b       	or	r24, r25
 57e:	87 bb       	out	0x17, r24	; 23
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	08 95       	ret
                // Set bit.
                SET_BIT(DDRB,p_config_struct -> pin);
            }
            break;
        case PORT_C:
            if (p_config_struct -> direction == DIO_INPUT) {
 584:	82 81       	ldd	r24, Z+2	; 0x02
 586:	81 11       	cpse	r24, r1
 588:	0e c0       	rjmp	.+28     	; 0x5a6 <DIO_Init+0xbe>
                // Clear bit.
                CLEAR_BIT(DDRC,p_config_struct -> pin);
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	01 80       	ldd	r0, Z+1	; 0x01
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_Init+0xae>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_Init+0xaa>
 59a:	80 95       	com	r24
 59c:	94 b3       	in	r25, 0x14	; 20
 59e:	89 23       	and	r24, r25
 5a0:	84 bb       	out	0x14, r24	; 20
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	08 95       	ret
            break;
        case PORT_C:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRC,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	99 f5       	brne	.+102    	; 0x610 <DIO_Init+0x128>
                // Set bit.
                SET_BIT(DDRC,p_config_struct -> pin);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	01 80       	ldd	r0, Z+1	; 0x01
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_Init+0xce>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	0a 94       	dec	r0
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_Init+0xca>
 5ba:	94 b3       	in	r25, 0x14	; 20
 5bc:	89 2b       	or	r24, r25
 5be:	84 bb       	out	0x14, r24	; 20
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
                // Set bit.
                SET_BIT(DDRC,p_config_struct -> pin);
            }
            break;
        case PORT_D:
            if (p_config_struct -> direction == DIO_INPUT) {
 5c4:	82 81       	ldd	r24, Z+2	; 0x02
 5c6:	81 11       	cpse	r24, r1
 5c8:	0e c0       	rjmp	.+28     	; 0x5e6 <DIO_Init+0xfe>
                // Clear bit.
                CLEAR_BIT(DDRD,p_config_struct -> pin);
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	01 80       	ldd	r0, Z+1	; 0x01
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_Init+0xee>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_Init+0xea>
 5da:	80 95       	com	r24
 5dc:	91 b3       	in	r25, 0x11	; 17
 5de:	89 23       	and	r24, r25
 5e0:	81 bb       	out	0x11, r24	; 17
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
            break;
        case PORT_D:
            if (p_config_struct -> direction == DIO_INPUT) {
                // Clear bit.
                CLEAR_BIT(DDRD,p_config_struct -> pin);
            } else if (p_config_struct -> direction == DIO_OUTPUT) {
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	a9 f4       	brne	.+42     	; 0x614 <DIO_Init+0x12c>
                // Set bit.
                SET_BIT(DDRD,p_config_struct -> pin);
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	01 80       	ldd	r0, Z+1	; 0x01
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_Init+0x10e>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	0a 94       	dec	r0
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_Init+0x10a>
 5fa:	91 b3       	in	r25, 0x11	; 17
 5fc:	89 2b       	or	r24, r25
 5fe:	81 bb       	out	0x11, r24	; 17
            }
            break;
        default:
            return DIO_PORT_INVALID;
    }
    return DIO_SUCCESS;
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret
                // Set bit.
                SET_BIT(DDRD,p_config_struct -> pin);
            }
            break;
        default:
            return DIO_PORT_INVALID;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	08 95       	ret
    }
    return DIO_SUCCESS;
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	08 95       	ret
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	08 95       	ret
 614:	80 e0       	ldi	r24, 0x00	; 0
}
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
